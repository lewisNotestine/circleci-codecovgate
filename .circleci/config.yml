# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  generate_and_store_test_coverage:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - run: mvn test
      - store_artifacts:
          path: target
      - run:
          # see https://circleci.com/docs/env-vars/#parameters-and-bash-environment
          name: "set cache key name variables"
          command: |
            echo 'export CACHE_KEY_RAW_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_raw' >> "$BASH_ENV"
            echo 'export CACHE_KEY_PROCESSED_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_processed' >> "$BASH_ENV"
            echo $CACHE_KEY_RAW_COVERAGE_DATA
      - save_cache:
          key: $CACHE_KEY_RAW_COVERAGE_DATA
          paths:
            - target/my-reports
      - store_artifacts:
          path: target/my-reports
          destination: jacoco-reports

  evaluate_test_coverage:
    when:
      not:
        matches:
          pattern: "^main$"
          value: << pipeline.git.branch >>
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: "set and check cache key name variables"
          command: |

            # TODO Branch and build num can already be interpolated in cache keys.
            # see https://circleci.com/docs/configuration-reference/#savecache
            echo 'export CACHE_KEY_RAW_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_raw' >> "$BASH_ENV"

            echo 'export CACHE_KEY_PROCESSED_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_processed' >> "$BASH_ENV"
            echo 'export LOCAL_BRANCH_COVERAGEPCT_FILENAME="processed_feature/$CACHE_KEY_PROCESSED_COVERAGE_DATA".txt' >> "$BASH_ENV"
            echo 'export CACHE_KEY_MAINBRANCH_PROCESSED_COVERAGE_DATA="mainbranch_processed_coverage"' >> "$BASH_ENV"
            echo 'branch is "$CIRCLE_BRANCH"'

      - restore_cache:
          keys:
            - $CACHE_KEY_RAW_COVERAGE_DATA
            - $CACHE_KEY_MAINBRANCH_PROCESSED_COVERAGE_DATA2
      - run:
          name: "calculate feature branch test coverage"
          command: |
            ls -an ./target/my-reports/
            pip install -r .circleci/requirements.txt
            mkdir processed_feature
            python .circleci/evaluateTestCoverage.py target/my-reports/index.html processed_feature CACHE_KEY_PROCESSED_COVERAGE_DATA

      - run:
          name: "compare feature and main branch coverage results"
          command: python .circleci/evaluateCompareTestCoverage.py $LOCAL_BRANCH_COVERAGEPCT_FILENAME processed_main/mainbranch_processed_coverage.txt

  save_main_branch_test_coverage:
    when:
      matches:
        pattern: "^main$"
        value: << pipeline.git.branch >>
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - run:
          name: "set and check cache key name variables"
          command: |

            # TODO Branch and build num can already be interpolated in cache keys.
            # see https://circleci.com/docs/configuration-reference/#savecache
            echo 'export CACHE_KEY_PROCESSED_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_processed' >> "$BASH_ENV"
            echo 'export CACHE_KEY_RAW_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_raw' >> "$BASH_ENV"
            echo 'export CACHE_KEY_MAINBRANCH_PROCESSED_COVERAGE_DATA2="processed_main/mainbranch_processed_coverage"' >> "$BASH_ENV"

      - restore_cache:
          keys:
            - $CACHE_KEY_RAW_COVERAGE_DATA

      - run:
          name: "calculate main branch code coverage"
          command: |
            mkdir processed_main
            pip install -r .circleci/requirements.txt
            python .circleci/evaluateTestCoverage.py target/my-reports/index.html processed_main CACHE_KEY_MAINBRANCH_PROCESSED_COVERAGE_DATA

      - save_cache:
          key: $CACHE_KEY_MAINBRANCH_PROCESSED_COVERAGE_DATA2
          paths:
            - processed_main/mainbranch_processed_coverage.txt


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  code-coverage-example-workflow:
    jobs:
      - generate_and_store_test_coverage
      - save_main_branch_test_coverage:
          requires:
            - generate_and_store_test_coverage
      - evaluate_test_coverage:
          requires:
            - generate_and_store_test_coverage
