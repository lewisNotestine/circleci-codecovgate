# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.4.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  generate-and-store-test-coverage:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - browser-tools/install-browser-tools
      - run: mvn test
      - store_artifacts:
          path: target
      - run:
          # see https://circleci.com/docs/env-vars/#parameters-and-bash-environment
          name: "set cache key name variables"
          command: |
            echo 'export CACHE_KEY_RAW_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_raw' >> "$BASH_ENV"
            echo 'export CACHE_KEY_PROCESSED_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_processed' >> "$BASH_ENV"
            echo $CACHE_KEY_RAW_COVERAGE_DATA
      - save_cache:
          key: $CACHE_KEY_RAW_COVERAGE_DATA
          paths:
            - target/my-reports



  evaluate-test-coverage:
    docker:
      - image: cimg/python:3.11
    steps:
      - run:
          name: "set and check cache key name variables"
          command: |
            echo 'export CACHE_KEY_RAW_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_raw' >> "$BASH_ENV"
            echo 'export CACHE_KEY_PROCESSED_COVERAGE_DATA="$CIRCLE_BRANCH"_"$CIRCLE_BUILD_NUM"_covg_processed' >> "$BASH_ENV"
            echo $CACHE_KEY_RAW_COVERAGE_DATA
      - run:
          name: "calculate branch test coverage"
          command: |
            python ./evaluateTestCoverage.py


      # compute the coverage (python)

      # compare coverage with cached coverage from main branch (python)

      # conditionally fail build if coverage metric falls below value from cached main branch

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
      - generate-and-store-test-coverage
      - evaluate-test-coverage
